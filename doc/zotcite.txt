*zotcite.txt*                                                          *zotcite*
				   zotcite~
			   Integration with Zotero~

Author: Jakson A. Aquino <jalvesaq@gmail.com>

 1. Overview                                                |zotcite_overview|
 2. Usage                                                      |zotcite_usage|
 3. Suggested workflow                                      |zotcite_workflow|
 4. Customization
    4.1 Change default maps                                 |zotcite_mappings|
    4.2 Zotcite engine                                        |zotcite_engine|
        Citation template                                  |ZCitationTemplate|
        Ban words fro citation template                         |ZBannedWords|
        Path to Zotero database                                |ZoteroSQLpath|
        Temporary directory path                              |Zotcite_tmpdir|
        Fields to exclude from references                    |Zotcite_exclude|
        Zotero collection to use                           |Zotero_collection|
    4.3 Syntax highlighting                             |zotcite_highlighting|
        Syntax highlighting of citation keys                      |zotcite_hl|
        Conceal level                                   |zotcite_conceallevel|
    4.4 File types                                         |zotcite_filetypes|
 5. Troubleshooting                                  |zotcite_troubleshooting|


==============================================================================
							    *zotcite_overview*
1. Overview~


Zotcite is a Vim plugin that provides integration with Zotero. Please, see a
description of its features, including screenshots at:

    https://github.com/jalvesaq/zotcite


==============================================================================
							       *zotcite_usage*
2. Usage~

To extract notes from Zotero and insert them into the markdown document, use
the Vim command `:Znote key` where is `key` is a word with one or more letters
of authors' names or from a reference title. By default, the colon separating
the year from the page is replaced by ", p. ". If you want to use the colon or
any other string as the separator, set the value of `$ZYearPageSep` in your
vimrc (or init.vim). Example:
>
 let $ZYearPageSep = ':'
<
Similarly, to extract annotations (notes and highlighted texts) from a PDF
document, use the Vim command `:Zpdfnote`. The page numbers of the annotations
might be wrong, so always check them after the extraction. You have also to
manually add italics and other rich text formating and put back hyphens
incorrectly removed from the end of the PDF lines.

To insert citation keys, in Insert mode, type the `@` letter and one or more
letters of either the last name of the first author or the reference title and
press <C-X><C-O>. The matching of citation keys is case insensitive.

To convert a Markdown document with pandoc, use the `zotref.py` filter that comes
with Zotcite. The Zotcite plugin adds the directory where `zotref.py` is to the
system `$PATH`. So, from within Vim/Neovim, do:
>
 :!pandoc file_name.md -s -o file_name.html -F zotref.py --citeproc
<
Replace `file_name` with the actual name of the markdown document being
edited, and `html` with the appropriate file extension.

To compile an RMarkdown document with the Nvim-R plugin
(https://github.com/jalvesaq/Nvim-R), add the following lines to the YAML
header of the document (replace `pdf_document` with the desired output):
>
 output:
   pdf_document:
     pandoc_args: ['-F', 'zotref.py', '--citeproc']
<
Note: On Windows you might have to replace `zotref.py` with its full path.
Example:
>
 output:
   pdf_document:
     pandoc_args: ['-F', '/Path/to/zotcite/python3/zotref.py', '--citeproc']
<
Note: Old versions of `pandoc` require `-F pandoc-citeproc` instead of
`--citeproc`.


In Vim's Normal mode, put the cursor over a citation key and press:

  - <Leader>zo to open the reference's attachment as registered in Zotero's
    database.

  - <Leader>zi to see in the status bar the last name of all authors, the
    year, and the title of the reference.

  - <Leader>za to see all fields of a reference as stored by Zotcite.

  - <Leader>zy to see how the reference will be converted into YAML.

You can also use the command `:Zseek` to see what references have either a
last author's name or title matching the pattern that you are seeking for. The
references displayed in the command line at the bottom of the screen will be
the same that would be in an omni completion menu. Example:
>
 :Zseek marx
<
The goal of Zotcite is to avoid the need for exporting bib files from Zotero.
The `zotref.py` filter receives the Markdown document from its standard input,
extracts all citation keys from the document, gets all corresponding
references from the Zotero database, inserts all references in the YAML header
of the document and, finally, returns the enhanced document to `pandoc`. If
there is a "bibliography" field in the YAML header it will be ignored and a
temporary bib file will be created on the `/tmp` directory, unless the bib
file's name ends with the "zotcite.bib" string. In this case, it will be
overwritten.

For Quarto documents, the "bibliography" field must be defined in its YAML
header. You have to add the following fields to the YAML header of your Quarto
documents to make both `quarto preview` and `quarto render` commands work
(replace `example_zotcite.bib` with whatever name you want and adjust the
`zotref.py` path):
>
   bibliography: example_zotcite.bib
   citeproc: true
   filters:
     - /path/to/zotcite/python3/zotref.py
     - quarto
<
If you have an OpenDocument Text with citations inserted by the Zotero
extension and want to convert it to Markdown, you can use the `odt2md.py`
application from the `python3` directory to help you to convert the document.
Example:
>
 /path/to/zotcite/python3/odt2md.py Document.odt
<
Within Vim/Neovim, you can run the command `:Zodt2md` to convert the ODT
document and see the resulting Markdown document in a new tab:
>
 :Zodt2md Document.odt
<
Note that the conversion is not perfect because the visible text from the
citation fields is not deleted. You have to delete them manually, keeping what
is needed, such as the page numbers that you have added manually. It is not
possible to automatize this step because LibreOffice allows the manual edition
of the citation fields.


==============================================================================
							    *zotcite_workflow*
3. Suggested workflow~

  1. Use Zotero's browser connector to download papers in PDF format.

  2. Read the papers, highlighting important passages, and making annotations.

  3. Run the command `:Zpdfnote` to extract your notes from the PDF document and
     insert them into the markdown document.

  5. Finish editing your markdown document.


==============================================================================
4. Customization~

							    *zotcite_mappings*
4.1 Change default maps~

To change the shortcut to open reference attachment, set the value of
<Plug>ZOpenAttachment in your vimrc as below:
>
 nmap <c-]> <Plug>ZOpenAttachment
<
To change the shortcut to see basic information on the reference of a citation
key, follow the example:
>
 nmap ,I <Plug>ZCitationInfo
<
To change the shortcut to see how the reference of a citation key is stored by
Zotcite, follow the example:
>
 nmap ,A <Plug>ZCitationCompleteInfo
<
To change the shortcut to see how the reference is converted into YAML, follow
the example:
>
 nmap ,Y <Plug>ZCitationCompleteInfo
<

							      *zotcite_engine*
4.2 Zotcite engine~

You can change most of Zotcite's behavior by setting some environment
variables in your `vimrc`/`init.vim` (or in your `~/.bashrc`, if you use bash
as your shell).

							   *ZCitationTemplate*
The citation keys inserted by Zotcite have the format `@ZoteroKey#Author_Year`
where `ZoteroKey` is the key attributed by Zotero to the references stored in
its database, `Author` is the last name of the first author, and `Year` is the
full year (four digits). The `@ZoteroKey#` part of the citation key is
mandatory because `zotref.py` uses it to add the bibliographic data that is
parsed by `citeproc`, but it will be concealed by Vim. The remaining of
the key is customizable. You can define whether it will include or not the
first author's last name (in either lower case `{author}` or title case
`{Author}`), the last name of the first three authors (either `{authors}` or
`{Authors}`), the first word of the title (`{title}` or `{Title}`) and the
year (with either four digits `{Year}` or only two `{year}`). Examples:
>
 let $ZCitationTemplate = '{author}{year}'
 let $ZCitationTemplate = '{Authors}_{Year}_{Title}'
<
								*ZBannedWords*
The following words are deleted from the title before its first word is
selected: a, an, the, some, from, on, in, to, of, do, and with. If you want to
ban a different set of words, define `$ZBannedWords` in your vimrc as in the
examples:
>
 " Spanish
 let $ZBannedWords = 'el la las lo los uno una unos unas al de en no con para'
 " French
 let $ZBannedWords = 'la les l un une quelques à un de avec pour'
 " Portuguese
 let $ZBannedWords = 'o um uma uns umas à ao de da dos em na no com para'
 " Italian
 let $ZBannedWords = 'la le l gli un una alcuni alcune all alla da dei nell con per'
 " German
 let $ZBannedWords = 'der die das ein eine einer eines einem einen einige im zu mit für von'
<
							       *ZoteroSQLpath*
If Zotcite cannot find the path to Zotero's database (`zotero.sqlite`), put
the correct path in your vimrc:
>
 let $ZoteroSQLpath = '/path/to/zotero.sqlite'
<
							      *Zotcite_tmpdir*
If Zotcite is trying to use a non-writable directory as its temporary and
cache directory, or if for any reason you want to change this directory,
follow the example:
>
 let $Zotcite_tmpdir = '/path/to/temporary_and_cache_directory
<
							     *Zotcite_exclude*
If you want to exclude some of Zotero's fields from the YAML references
generated by Zotcite, set the value of `$Zotcite_exclude` to a white separated
list of fields to be excluded. For example, if you want to exclude the fields
"Extra" (which appears as `note` in the YAML references) and "attachment", put
this in your vimrc:
>
 let $Zotcite_exclude = "note attachment"
<
							   *Zotero_collection*
If you want to restrict the search for references to specific collections
while completing citation keys, set the value `collection` in the YAML header
of the Markdown document, as in the examples:
>
 ---
 collection: ['New Paper']
 ...

 ---
 collection: ['PhD Thesis', 'New Paper']
 ...
<

							*zotcite_highlighting*
4.3 Syntax Highlighting~

Syntax highlighting customization is done with Vim variables.

								  *zotcite_hl*
If you want to disable Zotcite's syntax highlighting of citation keys, put in
your vimrc:
>
 let zotcite_hl = 0
<
							*zotcite_conceallevel*
Zotcite sets the conceallevel of the Markdown document to 2. If you want a
different value, follow the example:
>
 let zotcite_conceallevel = 0
<

							   *zotcite_filetypes*
4.4 File types~

Zotcite is enabled only if the file type is `markdown`, `pandoc` or `rmd`. If
you want it enabled for other file types, you should set the value of
`zotcite_filetypes` in your |vimrc|. Example:
>
  let zotcite_filetypes = ['markdown', 'pandoc', 'rmd', 'vimwiki']
<
If you want zotcite's highlighting in file types other than `markdown` and
`rmd`, put you will have to run an autocmd in your |vimrc| to source zotcite's
highlighting script. In the example below, `vimwiki` files get zotcite's
references properly highligted (of course, you have to write the correct
path to `markdown.vim`:
>
  autocmd FileType vimwiki source /path/to/zotcite/after/syntax/markdown.vim
<

==============================================================================
						     *zotcite_troubleshooting*
5. Troubleshooting~

								      *:Zinfo*
If either the plugin does not work or you want easy access to the values of
some internal variables, do the following command:
>
 :Zinfo
<
Note that Zotcite will not enable omni completion if any of the buffer's lines
matches the regular pattern `^bibliography:.*\.bib` when the markdown file is
read.
								      *:Zrefs*
You can check the YAML references generated by Zotcite with the command
`:Zrefs` which will insert in the document the list of references. This is
useful if `citeproc` fails to parse the references.

If you could not make the `zotref.py` script work you have to manually add the
references to the YAML header of your documment with the command `:Zrefs` and
delete and add the references again each time that you either cite or remove
the citation to a reference. Then, if there are only ASCII characters in the
references you will have a chance of successfully compiling the document.

>
			 vim:tw=78:ts=8:ft=help:norl
